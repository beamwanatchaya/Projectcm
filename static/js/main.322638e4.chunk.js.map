{"version":3,"sources":["logo.svg","view/home.js","view/BasicComputing.js","view/LinearEquations.js","view/Interpolation.js","view/Differentiation.js","view/Integration.js","view/Rootfinding.js","routing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","navigate","useNavigate","nextPage","page","Button","onClick","color","Basiccomputing","LinearEquations","Interpolations","Differentiation","Integration","Rootfinding","routes","path","element","App","routing","useRoutes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,6GCuC5BC,MAhCf,WACE,IAAMC,EAAWC,cAEXC,EAAW,SAACC,GAChBH,EAAS,IAAIG,IAGf,OACE,6BAEG,oCAAS,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,mBAAoBI,MAAM,2BAC7D,kDACK,6BAAK,6BACd,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,oBAAqBI,MAAM,2BACtD,mDACK,6BAAK,6BACd,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,kBAAmBI,MAAM,2BACpD,iDACK,6BAAK,6BACd,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,oBAAqBI,MAAM,2BACtD,kDACK,6BAAK,6BACd,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,gBAAiBI,MAAM,2BAClD,8CACK,6BAAK,6BACd,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,gBAAiBI,MAAM,2BAClD,+CACK,gCChCF,SAASC,IACtB,OACE,6BACE,+CCFS,SAASC,IACpB,OACI,6BACI,gDCJG,SAASC,IACpB,OACI,6BACI,+CCHG,SAASC,IACpB,OACI,6BACI,gDCHG,SAASC,IACpB,OACI,6BACI,4CCHG,SAASC,IACpB,OACI,6BACI,4CCIZ,IAmCiBC,EAnCF,CACX,CACEC,KAAM,IACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,YACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,iBACNC,QAAS,kBAACR,EAAD,OAEX,CACEO,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,gBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAACL,EAAD,OAEX,CACEI,KAAM,cACNC,QAAS,kBAACJ,EAAD,OAEX,CACEG,KAAM,cACNC,QAAS,kBAACH,EAAD,QC/BAI,EAJH,WACV,IAAMC,EAAUC,YAAUL,GAC1B,OAAO,6BAAMI,I,OCKKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.322638e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { CardTitle, CardText, Row, Col, Button, Card } from \"reactstrap\";\r\nimport \"../App.css\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction Home() {\r\n  const navigate = useNavigate();\r\n\r\n  const nextPage = (page) => {\r\n    navigate(\"/\"+page);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        \r\n       <center> <Button onClick={()=>{nextPage(\"BasicComputing\")}} color=\"btn btn-outline-success\">\r\n            <h5>1.Basic Computing</h5>\r\n        </Button><br/><br/>\r\n        <Button onClick={()=>{nextPage(\"LinearEquations\")}} color=\"btn btn-outline-success\">\r\n            <h5>2.Linear Equations</h5>\r\n        </Button><br/><br/>\r\n        <Button onClick={()=>{nextPage(\"Interpolation\")}} color=\"btn btn-outline-success\">\r\n            <h5>3.Interpolation\t</h5>\r\n        </Button><br/><br/>\r\n        <Button onClick={()=>{nextPage(\"Differentiation\")}} color=\"btn btn-outline-success\">\r\n            <h5>4.Differentiation</h5>\r\n        </Button><br/><br/>\r\n        <Button onClick={()=>{nextPage(\"Integration\")}} color=\"btn btn-outline-success\">\r\n            <h5>5.Integration</h5>\r\n        </Button><br/><br/>\r\n        <Button onClick={()=>{nextPage(\"Rootfinding\")}} color=\"btn btn-outline-success\">\r\n            <h5>6.Root-finding</h5>\r\n        </Button><br/></center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nexport default function Basiccomputing() {\r\n  return (\r\n    <div>\r\n      <h1>Basiccomputing</h1>\r\n    </div>\r\n  );\r\n}","    \r\nimport React from 'react'\r\n\r\nexport default function LinearEquations() {\r\n    return (\r\n        <div>\r\n            <h1>LinearEquations</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Interpolations() {\r\n    return (\r\n        <div>\r\n            <h1>Interpolations</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Differentiation() {\r\n    return (\r\n        <div>\r\n            <h1>Differentiation</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Integration() {\r\n    return (\r\n        <div>\r\n            <h1>Integration</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Rootfinding() {\r\n    return (\r\n        <div>\r\n            <h1>Rootfinding</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Home from './view/home'\r\nimport Basiccomputing from './view/BasicComputing'\r\nimport Linearequations from './view/LinearEquations'\r\nimport Interpolation from './view/Interpolation'\r\nimport Differentiation from './view/Differentiation'\r\nimport Integration from './view/Integration'\r\nimport Rootfinding from './view/Rootfinding'\r\n\r\nconst routes = [\r\n    {\r\n      path: \"/\",\r\n      element: <Home />,\r\n    },\r\n    {\r\n      path: \"Projectcm\",\r\n      element: <Home />,\r\n    },\r\n    {\r\n      path: \"basiccomputing\",\r\n      element: <Basiccomputing />,\r\n    },\r\n    {\r\n      path: \"linearequations\",\r\n      element: <Linearequations />,\r\n    },\r\n    {\r\n      path: \"interpolation\",\r\n      element: <Interpolation />,\r\n    },\r\n    {\r\n      path: \"differentiation\",\r\n      element: <Differentiation/>,\r\n    },\r\n    {\r\n      path: \"integration\",\r\n      element: <Integration />,\r\n    },\r\n    {\r\n      path: \"rootfinding\",\r\n      element: <Rootfinding />,\r\n    },\r\n  ];\r\n  \r\n  export default routes;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport routes from \"./routing\";\nimport { useRoutes } from \"react-router-dom\";\nconst App = () => {\n  const routing = useRoutes(routes);\n  return <div>{routing}</div>;\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}